AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  todo-app-backend
  Serverless backend for a To-Do application.

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs18.x
    Tracing: Active # Enable X-Ray tracing for better observability

Resources:
  # DynamoDB Table for Tasks
  TodoAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'TodoAppTable-${AWS::StackName}'
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST # On-demand capacity 
      StreamSpecification: 
        StreamViewType: NEW_AND_OLD_IMAGES 

  # API Gateway REST API
  TodoAppApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            IdentitySource: "method.request.header.Authorization"
      # This CORS configuration will apply to all methods on this API.
      # It correctly configures OPTIONS methods to not require authorization.
      Cors:
        AllowOrigin: "'*'" # Be more specific in production
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  # Lambda Function for handling tasks (CRUD)
  TasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: tasks.handler
      Events:
        # This event handles the POST request to create a task
        CreateTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: POST
            RestApiId: !Ref TodoAppApi
        # This event handles the GET request to list all tasks
        GetTasks:
          Type: Api
          Properties:
            Path: /tasks
            Method: GET
            RestApiId: !Ref TodoAppApi
        # This event handles the GET request for a single task
        GetTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: GET
            RestApiId: !Ref TodoAppApi
        # This event handles the PUT request to update a task
        UpdateTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: PUT
            RestApiId: !Ref TodoAppApi
        # This event handles the DELETE request to remove a task
        DeleteTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: DELETE
            RestApiId: !Ref TodoAppApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoAppTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TaskNotificationsTopic.TopicName
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoAppTable

  # Cognito User Pool for authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      LambdaConfig:
        PostAuthentication: !GetAtt PostAuthenticationLambda.Arn 
      
  # Cognito User Pool Client for our web/mobile app
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-client'
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      GenerateSecret: false # Recommended for public clients like web apps

  # SNS Topic for task notifications
  TaskNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Task Expiry Notifications"
      
  # SQS FIFO Queue for expiry events
  TaskExpiryQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      QueueName: !Sub 'TaskExpiryQueue-${AWS::StackName}.fifo'
      
  # Lambda for handling task expiry
  TaskExpiryHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: expiry.handler
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TaskExpiryQueue.Arn
            BatchSize: 1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoAppTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TaskNotificationsTopic.TopicName
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoAppTable
          SNS_TOPIC_ARN: !Ref TaskNotificationsTopic

# Lambda for handling DynamoDB Stream events (Scheduling/Cancelling Expiry)
  StreamHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: stream_handler.handler
      Events:
        StreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TodoAppTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
      Policies:
        # Explicit IAM Statement to read the DynamoDB Stream
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
            Resource: !GetAtt TodoAppTable.StreamArn
        # Policy to send messages to the SQS Queue
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TaskExpiryQueue.QueueName
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref TaskExpiryQueue

# PostAuthentication Lambda for subscribing users to SNS 
  PostAuthenticationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: post_auth.handler
      Policies:
        # Explicit IAM Statement for SNS Publish (Needed for later notifications)
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref TaskNotificationsTopic
        # Explicit IAM Statement for SNS Subscribe (The Fix)
        - Statement:
            Effect: Allow
            Action:
              - sns:Subscribe # Grants permission to subscribe the user
            Resource: !Ref TaskNotificationsTopic
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref TaskNotificationsTopic

# Permission for Cognito to invoke the PostAuthentication Lambda
  CognitoPermissionToInvokePostAuth:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PostAuthenticationLambda.Arn
      Principal: 'cognito-idp.amazonaws.com'
      SourceArn: !GetAtt UserPool.Arn # Restricts invocation to this specific User Pool
Outputs:
  # The URL of the REST API created by API Gateway
  TodoAppApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${TodoAppApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${AWS::StackName}-TodoAppApi"

  # The ID of the Cognito User Pool
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  # The ID of the Cognito User Pool Client (for frontends)
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"